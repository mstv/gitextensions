<Project>
  <Import Project="$(RepoRoot)\eng\Publish.targets"/>

  <!--
    ============================================================
                       _PublishTranslations

    Copies all available translations to the publish directory.
    ============================================================
    -->
  <Target Name="_PublishTranslations">
    <_GetAvailableTranslationsCodeTask
          TranslationFolder="$(TargetDir)Translation\">
      <Output ItemName="Translations" TaskParameter="Output"/>
    </_GetAvailableTranslationsCodeTask>

    <Copy SourceFiles="@(Translations)" DestinationFolder="$(PublishDir)Translation" ContinueOnError="false" />
  </Target>

  <!--
    ============================================================
                       _RetrieveCurrentBuildVersion

    Retrieves the current build version.
    ============================================================
    -->
  <Target Name="_RetrieveCurrentBuildVersion">
    <PropertyGroup>
      <_ApplicationManifestIdentity2>$([System.String]::Copy('$(_DeploymentApplicationManifestIdentity)').Replace('.exe', '.dll'))</_ApplicationManifestIdentity2>
      <ExeAssembly>$([MSBuild]::NormalizePath('$(PublishDir)', $(_ApplicationManifestIdentity2)))</ExeAssembly>
    </PropertyGroup>

    <GetAssemblyIdentity AssemblyFiles="$(ExeAssembly)">
      <Output TaskParameter="Assemblies" ItemName="ExeAssemblyIdentities"/>
    </GetAssemblyIdentity>

    <PropertyGroup>
      <CurrentBuildVersion>%(ExeAssemblyIdentities.Version)</CurrentBuildVersion>
    </PropertyGroup>    
  </Target>

  <!--
    ============================================================
                       _DownloadPluginManager

    Download plugin manager.
    ============================================================
    -->
  <PropertyGroup>
    <_PluginManagerPath>$([MSBuild]::NormalizePath('$(ArtifactsPublishDir)', 'GitExtensions.PluginManager'))</_PluginManagerPath>
  </PropertyGroup>

  <Target Name="_DownloadPluginManager">
    <Exec 
      Condition="!Exists('$(_PluginManagerPath)')"
      Command="powershell.exe $(RepoRoot)\eng\Download-PluginManager.ps1 -ExtractRootPath '$(_PluginManagerPath)'" />
  </Target>

  <!--
    ============================================================
                       _CleanupBeforePack

    Removes all files not eligible for packing.
    ============================================================
    -->
  <Target Name="_CleanupBeforePack">
    <PropertyGroup>
      <_AppPluginsPublishDir>$([MSBuild]::NormalizeDirectory('$(AppPublishDir)', 'Plugins'))</_AppPluginsPublishDir>
    </PropertyGroup>

    <ItemGroup>
      <UnnecessaryFiles Include="$(AppPublishDir)\*.pdb"/>
      <UnnecessaryFiles Include="$(AppPublishDir)\*.exe.config"/>
      <UnnecessaryFiles Include="$(AppPublishDir)\*.dll.config"/>
      <UnnecessaryFiles Include="$(AppPublishDir)\*.xml"/>
      <UnnecessaryFiles Include="$(AppPublishDir)\TranslationApp.*"/>
      <UnnecessaryFiles Include="$(AppPublishDir)\ApplicationInsights.config"/>
      <!-- Duplicates -->
      <UnnecessaryFiles Include="$(_AppPluginsPublishDir)\Newtonsoft.Json.dll"/>

      <!-- Keep this one -->
      <UnnecessaryFiles Remove="$(AppPublishDir)\GitExtensions.dll.*"/>
    </ItemGroup>

    <Delete Files="@(UnnecessaryFiles)" />

  </Target>

  <!--
    ============================================================
                       _PatchRuntimeConfigJson

    Retain only the reference to Microsoft.WindowsDesktop.App in the packaged *.runtimeconfig.json.
    See https://github.com/gitextensions/gitextensions/issues/10337 for more details.
    ============================================================
    -->
    <Target Name="_PatchRuntimeConfigJson" AfterTargets="Publish">
      <ItemGroup>
        <RuntimeConfigJsonFiles Include="$(AppPublishDir)\*.runtimeconfig.json"/>
      </ItemGroup>
  
      <Exec Command="powershell.exe $(RepoRoot)\eng\Patch-RuntimeConfigJsonFiles.ps1 '@(RuntimeConfigJsonFiles)'" />
    </Target>

  <!--
    ============================================================
                       _EnsureBundleContent

    Copies all necessary files for the pack step.
    ============================================================
    -->
  <Target Name="_EnsureBundleContent">
    <PropertyGroup>
      <ContinuousIntegrationBuild Condition="'$(ContinuousIntegrationBuild)' == ''">false</ContinuousIntegrationBuild>

      <_UserDictionariesSourceDir>$([MSBuild]::NormalizeDirectory('$(RepoRoot)', 'Bin', 'Dictionaries'))</_UserDictionariesSourceDir>
      <_UserDictionariesPublishDir>$([MSBuild]::NormalizeDirectory('$(AppPublishDir)', 'Dictionaries'))</_UserDictionariesPublishDir>

      <_AppPluginsPublishDir>$([MSBuild]::NormalizeDirectory('$(AppPublishDir)', 'Plugins'))</_AppPluginsPublishDir>
      <_AppUserPluginsPublishDir>$([MSBuild]::NormalizeDirectory('$(AppPublishDir)', 'UserPlugins'))</_AppUserPluginsPublishDir>


      <_PluginManagerBinPath>$([MSBuild]::NormalizeDirectory('$(_PluginManagerPath)', 'Output'))</_PluginManagerBinPath>
      <_PluginManagerPublishDir>$([MSBuild]::NormalizeDirectory('$(_AppUserPluginsPublishDir)', 'GitExtensions.PluginManager'))</_PluginManagerPublishDir>
    </PropertyGroup>

    <!-- Determine plugins assemblies and their required references -->
    <_GetPluginAssembliesCodeTask
          SolutionPath="$(SolutionPath)"
          BuildConfiguration="$(Configuration)"
          IsContinuousIntegrationBuild="$(ContinuousIntegrationBuild)">
      <Output ItemName="CollectedPluginAssemblies" TaskParameter="Output"/>
    </_GetPluginAssembliesCodeTask>

    <ItemGroup>
      <UserDictionaries Include="$(_UserDictionariesSourceDir)\*.dic" />
    </ItemGroup>

    <ItemGroup>
      <!-- Collect plugin and their direct reference -->
      <PluginAssemblies Include="@(CollectedPluginAssemblies)" />
      <PluginAssemblies Remove="@(PluginAssemblies)" Condition="$([System.String]::Copy('%(Filename)').EndsWith('.resources'))" />

      <!-- Collect resources for plugins -->
      <PluginResourcesAssemblies Include="@(CollectedPluginAssemblies)" />
      <PluginResourcesAssemblies Remove="@(PluginResourcesAssemblies)" Condition="!$([System.String]::Copy('%(Filename)').EndsWith('.resources'))" />
      <!-- Resources must leave in own folders, so replace the base path with the plugins target folder -->
      <PluginResourcesAssemblies>
        <DestinationFiles>$([System.String]::Copy('%(Identity)').Replace('%(BasePath)', '$(_AppPluginsPublishDir)'))</DestinationFiles>
      </PluginResourcesAssemblies>
      <!-- Collect resources for UserPlugins -->
      <UserPluginResources Include="$(_PluginManagerBinPath)\**\*.*" />
    </ItemGroup>

    <!-- Copy the dictionaries to the Dictionaries folder -->
    <Copy
            SourceFiles="@(UserDictionaries)"
            DestinationFolder="$(_UserDictionariesPublishDir)"
            ContinueOnError="ErrorAndStop"
          />

    <ItemGroup>
      <NativeAssemblies Include="$([MSBuild]::NormalizePath('$(ArtifactsBinDir)', 'GitExtSshAskPass'))\*.dll" />
      <NativeAssemblies Include="$([MSBuild]::NormalizePath('$(ArtifactsBinDir)', 'GitExtensionsShellEx'))\*.dll" />
    </ItemGroup>

    <!-- Copy the native components -->
    <Copy
            SourceFiles="@(NativeAssemblies)"
            DestinationFolder="$(AppPublishDir)"
            ContinueOnError="ErrorAndStop"
          />

    <!-- Copy the plugins to the Plugins folder -->
    <Copy
            SourceFiles="@(PluginAssemblies)"
            DestinationFolder="$(_AppPluginsPublishDir)"
            ContinueOnError="ErrorAndStop"
          />
    <!-- Copy the plugins' resources to the Plugins folder -->
    <Copy
            SourceFiles="@(PluginResourcesAssemblies)"
            DestinationFiles="@(PluginResourcesAssemblies->'%(DestinationFiles)')"
            ContinueOnError="ErrorAndStop"
          />
    <!-- Copy the PluginManager to the UserPlugins folder -->
    <Copy
            SourceFiles="@(UserPluginResources)"
            DestinationFolder="$(_PluginManagerPublishDir)\%(RecursiveDir)"
            ContinueOnError="ErrorAndStop"
          />

  </Target>

  <!--
    ============================================================
                       _CheckBundlesConsistent

    Checks whether all files that are present in $(PublishDir) are delcared in Setup/Product.wxs.
    ============================================================
    -->
  <Target Name="_CheckBundlesConsistent" AfterTargets="Publish" DependsOnTargets="_PublishTranslations;_DownloadPluginManager;_EnsureBundleContent;_CleanupBeforePack">
    <Exec
        Command="powershell.exe .\setup\installer\Check-BundlesConsistent.ps1 '$(PublishDir)'"
        WorkingDirectory="$(RepoRoot)"
        EchoOff="true"
        ConsoleToMsBuild="true"
        StandardOutputImportance="High">
    </Exec>
  </Target>


</Project>
